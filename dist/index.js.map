{"version":3,"sources":["../src/lib/createStore.ts","../src/lib/generateApi.ts","../src/lib/generateGetFn.ts","../src/lib/generateGet.ts","../src/lib/generateSetFn.ts","../src/lib/generateSet.ts","../src/lib/generateUseStep.ts","../src/lib/generateUseFn.ts","../src/lib/generateUse.ts","../src/lib/extendGetters.ts","../src/lib/extendSetters.ts","../src/lib/restrictState.ts","../src/plugins/reset.ts"],"sourcesContent":["/**\n * Entire zustand-lite no-boilerplate functionality is inspired by this recipe:\n * https://docs.pmnd.rs/zustand/guides/auto-generating-selectors and 3th party\n * zustand-x repository: https://github.com/udecode/zustand-x.\n **/\nimport { DevtoolsOptions, PersistOptions, devtools, persist } from 'zustand/middleware'\nimport { createStore as createVanillaStore } from 'zustand/vanilla'\n\nimport {\n\tAugmentedApiData,\n\tAugmentedGetters,\n\tAugmentedSetters,\n\tGettersBuilder,\n\tSettersBuilder,\n\tState,\n\tStoreApi,\n\tStoreApiPluginList,\n} from '../types'\nimport { generateApi } from './generateApi'\nimport { generateGet } from './generateGet'\nimport { generateSet } from './generateSet'\nimport { generateUse } from './generateUse'\nimport { extendGetters } from './extendGetters'\nimport { extendSetters } from './extendSetters'\nimport { restrictState } from './restrictState'\n\nexport function createStore<S extends State, Plugins extends StoreApiPluginList = []>(\n\tinitialState: S,\n\toptions?: {\n\t\tname?: string\n\t\tplugins?: [...Plugins]\n\t\tmiddlewares?: { devtools?: true | DevtoolsOptions; persist?: true | PersistOptions<any> }\n\t}\n): Plugins extends []\n\t? StoreApi<S>\n\t: StoreApi<AugmentedApiData<S, Plugins>, AugmentedGetters<Plugins>, AugmentedSetters<Plugins>> {\n\tconst { name = 'zustand-lite', plugins = [], middlewares = {} } = options ?? {}\n\n\t// Merge state from plugins to be available for future use.\n\tlet mergedState: any = initialState\n\tplugins.forEach((plugin) => {\n\t\tif (plugin.creates) {\n\t\t\tmergedState = { ...mergedState, ...plugin.creates() }\n\t\t}\n\t})\n\n\t// Apply supported middlewares.\n\tlet initializer: any = () => mergedState\n\n\tif (middlewares.devtools) {\n\t\tinitializer = devtools(\n\t\t\tinitializer,\n\t\t\tmiddlewares.devtools === true\n\t\t\t\t? { name: 'zustand-lite', store: name }\n\t\t\t\t: middlewares.devtools\n\t\t)\n\t}\n\n\tif (middlewares.persist) {\n\t\tinitializer = persist(\n\t\t\tinitializer,\n\t\t\tmiddlewares.persist === true ? { name } : middlewares.persist\n\t\t)\n\t}\n\n\t// Create a vanilla zustand store to wrap.\n\tconst storeLib: any = createVanillaStore(initializer)\n\n\t// Create zustand-lite wrapper.\n\tconst storeApi: any = {\n\t\tapi: generateApi(storeLib),\n\t\tget: generateGet(storeLib),\n\t\tuse: generateUse(storeLib),\n\t\tset: generateSet(storeLib, !!middlewares.devtools),\n\t\textendGetters<Builder extends GettersBuilder<typeof mergedState>>(builder: Builder) {\n\t\t\treturn extendGetters(builder, this, storeLib)\n\t\t},\n\t\textendSetters<Builder extends SettersBuilder<typeof mergedState>>(builder: Builder) {\n\t\t\treturn extendSetters(builder, this, storeLib, !!middlewares.devtools)\n\t\t},\n\t\trestrictState(publicState = []) {\n\t\t\treturn restrictState(publicState, mergedState, this, storeLib)\n\t\t},\n\t}\n\n\t// Extend store getters and setters with plugins.\n\tlet result = storeApi\n\tplugins.forEach((plugin) => {\n\t\tif (plugin.extends) {\n\t\t\tresult = plugin.extends(storeApi)\n\t\t}\n\t})\n\n\treturn result\n}\n","import { StoreApi as StoreLib } from 'zustand/vanilla'\n\nimport { State } from '../types'\n\n/**\n * Required to wrap original Zustand interface without getState and setState, which are handled\n * by get and set (we should allow only one way of doing certain things).\n * @param lib Zustand api interface\n */\nexport function generateApi<S extends State>(lib: StoreLib<S>) {\n\treturn { getInitialState: lib.getInitialState, subscribe: lib.subscribe }\n}\n","import { StoreApi as StoreLib } from 'zustand/vanilla'\n\nimport { State } from '../types'\n\n/**\n * Generates getState function for store.get()\n * @param lib Zustand api interface\n */\nexport function generateGetFn<S extends State>(lib: StoreLib<S>) {\n\treturn () => lib.getState()\n}\n","import { StoreApi as StoreLib } from 'zustand/vanilla'\n\nimport { State } from '../types'\nimport { generateGetFn } from './generateGetFn'\n\n/**\n * Generates getters for store.get. In the past getters were generated as functions, but I\n * came to the conclusion that it's better and simpler to return the whole state.\n * @param lib Zustand api interface\n */\nexport function generateGet<S extends State>(lib: StoreLib<S>) {\n\treturn generateGetFn(lib)\n}\n","import { StoreApi as StoreLib } from 'zustand/vanilla'\n\nimport { State } from '../types'\n\n// Properly generate action names for chromium-based browsers and firefox.\nfunction getFunctionNamesFromStack(stack?: string): string[] {\n\tif (!stack) return []\n\n\treturn stack\n\t\t.split('\\n')\n\t\t.map((line) => {\n\t\t\t// Chrome / Edge format: \"    at functionName (file.js:10:15)\"\n\t\t\tconst chromeMatch = line.match(/at (\\S+)/)\n\t\t\tif (chromeMatch) {\n\t\t\t\treturn chromeMatch[1]\n\t\t\t}\n\n\t\t\t// Firefox format: \"functionName@file.js:10:15\"\n\t\t\tconst firefoxMatch = line.match(/^(\\S+)@/)\n\t\t\tif (firefoxMatch) {\n\t\t\t\treturn firefoxMatch[1]\n\t\t\t}\n\n\t\t\treturn null\n\t\t})\n\t\t.filter((name): name is string => !!name)\n\t\t.map((name) => {\n\t\t\tconst split = name.split('.')\n\t\t\treturn split?.[1] ?? split?.[0]\n\t\t})\n}\n\n/**\n * Hacky, but working (and possibly only one there is) method of fetching proper caller\n * name. Used to generate devtools action name from the function name.\n */\nfunction getSetterName() {\n\t// Proper setter name should hide at 2nd position in the normalized stack.\n\treturn getFunctionNamesFromStack(new Error().stack)?.[2] ?? 'setState'\n}\n\n/**\n * Generates automatic setState function for store like store.set({ value })\n * @param lib Zustand api interface\n * @param hasDevtools If devtools were activated for this store\n */\nexport function generateSetFn<S extends State>(lib: StoreLib<S>, hasDevtools: boolean) {\n\treturn (updater: S | ((state: S) => S), replace?: boolean, name?: string) => {\n\t\tlib.setState(\n\t\t\tupdater,\n\t\t\treplace,\n\t\t\t// @ts-ignore Additional parameter will have no effect even if devtools are disabled.\n\t\t\thasDevtools ? { type: name ?? getSetterName(), payload: updater } : undefined\n\t\t)\n\t}\n}\n","import { StoreApi as StoreLib } from 'zustand/vanilla'\n\nimport { SetRecord, State } from '../types'\nimport { generateSetFn } from './generateSetFn'\n\n/**\n * Generates automatic setters like store.set.foo(value)\n * @param lib Zustand api interface\n * @param hasDevtools If devtools were activated for this store\n */\nexport function generateSet<S extends State>(lib: StoreLib<S>, hasDevtools: boolean) {\n\tconst setters: any = generateSetFn(lib, hasDevtools)\n\n\tObject.keys(lib.getState()).forEach((key) => {\n\t\tsetters[key] = (value: any) => {\n\t\t\tif (lib.getState()[key] === value) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlib.setState(\n\t\t\t\t(state) => ({ ...state, [key]: value }),\n\t\t\t\tfalse,\n\t\t\t\t// @ts-ignore Additional parameter will have no effect even if devtools are disabled.\n\t\t\t\thasDevtools ? { type: key, payload: { [key]: value } } : undefined\n\t\t\t)\n\t\t}\n\t})\n\n\treturn setters as SetRecord<S>\n}\n","import { shallow } from 'zustand/shallow'\nimport { useStoreWithEqualityFn } from 'zustand/traditional'\n\n/**\n * Generates automatic getters like store.use.foo() (recursive steps for each level).\n * Getters are created as side effects.\n * @param state State at nth level\n * @param getters Getters at nth level\n * @param path Property access path at nth level like ['foo', 'bar']\n * @param lib Zustand api interface\n */\nexport function generateUseStep(state: any, getters: any, path: string[], lib: any) {\n\tif (typeof state === 'object' && state !== null) {\n\t\tObject.keys(state).forEach((key) => {\n\t\t\tconst newPath = [...path, key]\n\t\t\tObject.defineProperty(getters, key, {\n\t\t\t\tvalue: (equalityFn = shallow) => {\n\t\t\t\t\treturn useStoreWithEqualityFn(\n\t\t\t\t\t\tlib,\n\t\t\t\t\t\t(state) => getFromPath(state, newPath),\n\t\t\t\t\t\tequalityFn\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t})\n\n\t\t\tgenerateUseStep(state[key], getters[key], newPath, lib)\n\t\t})\n\t}\n}\n\nfunction getFromPath(state: any, path: string[]) {\n\tlet data = state\n\n\tfor (const key of path) {\n\t\tdata = data[key]\n\t\tif (!data) {\n\t\t\treturn data\n\t\t}\n\t}\n\n\treturn data\n}\n","import { shallow } from 'zustand/shallow'\nimport { useStoreWithEqualityFn } from 'zustand/traditional'\n\nimport { StoreApi as StoreLib } from 'zustand'\n\nimport { State, EqualityChecker } from '../types'\n\n/**\n * Generates automatic getters like store.use.foo()\n * @param lib Zustand api interface\n */\nexport function generateUseFn<S extends State, U>(lib: StoreLib<S>) {\n\treturn (selector: (state: S) => U, equality: EqualityChecker<U> = shallow) => {\n\t\treturn useStoreWithEqualityFn(lib, selector, equality)\n\t}\n}\n","import { StoreApi as StoreLib } from 'zustand'\n\nimport { State } from '../types'\nimport { generateUseStep } from './generateUseStep'\nimport { generateUseFn } from './generateUseFn'\n\n/**\n * Generates automatic store hook subscribe function store.use()\n * @param lib Zustand api interface\n */\nexport function generateUse<S extends State>(lib: StoreLib<S>) {\n\tconst getters = generateUseFn(lib)\n\tgenerateUseStep(lib.getState(), getters, [], lib)\n\treturn getters\n}\n","import { shallow } from 'zustand/shallow'\nimport { useStoreWithEqualityFn } from 'zustand/traditional'\nimport { StoreApi as StoreLib } from 'zustand/vanilla'\n\nimport { Default, GettersBuilder, State, StoreApi } from '../types'\nimport { generateGetFn } from './generateGetFn'\nimport { generateUseFn } from './generateUseFn'\n\nexport function extendGetters<\n\tBuilder extends GettersBuilder<S, Getters>,\n\tS extends State = Default,\n\tGetters = Default,\n\tSetters = Default,\n>(builder: Builder, store: StoreApi<S, Getters, Setters>, lib: StoreLib<S>) {\n\tconst methods: any = builder({ get: store.get })\n\tconst getters: any = {}\n\n\tObject.keys(methods).forEach((key) => {\n\t\tgetters[key] = (...args: any[]) =>\n\t\t\tuseStoreWithEqualityFn(lib, () => methods[key](...args), shallow)\n\t})\n\n\tstore.use = Object.assign(generateUseFn(lib), store.use, getters)\n\tstore.get = Object.assign(generateGetFn(lib), store.get, methods)\n\treturn store\n}\n","import { StoreApi as StoreLib } from 'zustand/vanilla'\nimport { Default, SettersBuilder, State, StoreApi } from '../types'\nimport { generateSetFn } from './generateSetFn'\n\nexport function extendSetters<\n\tBuilder extends SettersBuilder<S, Getters, Setters>,\n\tS extends State = Default,\n\tGetters = Default,\n\tSetters = Default,\n>(builder: Builder, store: StoreApi<S, Getters, Setters>, lib: StoreLib<S>, hasDevtools: boolean) {\n\tconst setters = generateSetFn(lib, hasDevtools)\n\tstore.set = Object.assign(setters, store.set, builder(store))\n\treturn store\n}\n","import { StoreApi as StoreLib } from 'zustand/vanilla'\n\nimport { GetRecord, SetRecord, State, StoreApi } from '../types'\nimport { generateUseFn } from './generateUseFn'\n\n/**\n * Function that restrict access to the store and store api.\n * @param privateState Property names to be made private like ['foo', 'bar']\n * @param mergedState Final state of the store\n * @param store Returned store API\n * @param lib Zustand api interface\n */\nexport function restrictState<\n\tS extends State,\n\tKey extends keyof S,\n\tGetters extends GetRecord<any>,\n\tSetters extends SetRecord<any>,\n>(privateState: Key[], mergedState: S, store: StoreApi<S, Getters, Setters>, lib: StoreLib<S>) {\n\treturn {\n\t\tapi: store.api,\n\t\tset: store.set,\n\t\tuse: privateState\n\t\t\t? (() => {\n\t\t\t\t\tconst getters = Object.keys(store.use).reduce(\n\t\t\t\t\t\t(acc, key) =>\n\t\t\t\t\t\t\tmergedState[key] && (privateState as string[]).includes(key)\n\t\t\t\t\t\t\t\t? acc\n\t\t\t\t\t\t\t\t: { ...acc, [key]: store.use[key] },\n\t\t\t\t\t\t{}\n\t\t\t\t\t)\n\n\t\t\t\t\treturn Object.assign(generateUseFn(lib), getters)\n\t\t\t\t})()\n\t\t\t: store.use,\n\t\tget: privateState\n\t\t\t? (() => {\n\t\t\t\t\tconst getFn = () =>\n\t\t\t\t\t\tObject.entries(store.get()).reduce(\n\t\t\t\t\t\t\t(acc, [key, val]) =>\n\t\t\t\t\t\t\t\tmergedState[key] && (privateState as string[]).includes(key)\n\t\t\t\t\t\t\t\t\t? acc\n\t\t\t\t\t\t\t\t\t: { ...acc, [key]: val },\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t)\n\n\t\t\t\t\treturn Object.assign(getFn, store.get)\n\t\t\t\t})()\n\t\t\t: store.get,\n\t}\n}\n","import { StoreApiPlugin } from '../types'\n\ntype PluginResetSetters = { reset: () => void }\n\n/**\n * Basic plugin example, that extends store with custom setter.\n */\nexport const reset: StoreApiPlugin<{}, {}, PluginResetSetters> = {\n\textends: (store) => {\n\t\treturn store.extendSetters(({ api, set }) => ({\n\t\t\treset: () => {\n\t\t\t\tset(api.getInitialState?.() ?? {}, true)\n\t\t\t},\n\t\t}))\n\t},\n}\n"],"mappings":"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","names":["devtools","persist","createVanillaStore","generateApi","lib","generateGetFn","lib","generateGet","lib","generateGetFn","getFunctionNamesFromStack","stack","line","chromeMatch","firefoxMatch","name","split","getSetterName","generateSetFn","lib","hasDevtools","updater","replace","generateSet","lib","hasDevtools","setters","generateSetFn","key","value","state","shallow","useStoreWithEqualityFn","generateUseStep","state","getters","path","lib","key","newPath","equalityFn","getFromPath","data","shallow","useStoreWithEqualityFn","generateUseFn","lib","selector","equality","generateUse","lib","getters","generateUseFn","generateUseStep","shallow","useStoreWithEqualityFn","extendGetters","builder","store","lib","methods","getters","key","args","useStoreWithEqualityFn","shallow","generateUseFn","generateGetFn","extendSetters","builder","store","lib","hasDevtools","setters","generateSetFn","restrictState","privateState","mergedState","store","lib","getters","acc","key","generateUseFn","val","createStore","initialState","options","name","plugins","middlewares","mergedState","plugin","initializer","devtools","persist","storeLib","createVanillaStore","storeApi","generateApi","generateGet","generateUse","generateSet","builder","extendGetters","extendSetters","publicState","restrictState","result","reset","store","api","set"]}